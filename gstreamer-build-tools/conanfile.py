#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import shutil
import re
from conans import ConanFile, CMake, tools


class GstreamerBuildToolsConan(ConanFile):
    name = "gstreamer-build-tools"
    version = "1.14.0.1"
    description = "cerbero build tools generated by boostrap"
    url = "https://github.com/yjjnls/conan-gstreamer"
    license = "Apache-2.0"
    homepage = "https://github.com/yjjnls/conan-gstreamer"
    settings = "os", "arch", "compiler", "build_type"
    options = {"shared": [True, False], "fPIC": [True, False]}
    default_options = "shared=True", "fPIC=True"
    source_subfolder = "source_subfolder"
    root = ""

    def config_options(self):
        self.root = "%s/.." % os.getcwd()
        if self.settings.os == "Windows":
            self.options.remove("fPIC")

    def system_requirements(self):
        if not os.path.exists("%s/cerbero" % self.root):
            self.run(
                "git clone https://github.com/yjjnls/cerbero", cwd=self.root)
        self.run("git config --global user.name \"yjjnls\"")
        self.run("git config --global user.email \"x-jj@foxmail.com\"")

    def build(self):
        if self.settings.os == "Linux":
            command = "if [ $(dpkg -l |grep build-essential |wc -l) -eq 0 ]; then \
            sudo apt-get -y update && \
            sudo apt-get -y upgrade && \
            yes|sudo apt-get install build-essential; \
            fi "

            self.run(command)
            self.run(
                "yes|sudo ./cerbero-uninstalled -c config/linux.config bootstrap",
                cwd="%s/cerbero" % self.root)
        else:
            path = "%s/cerbero" % self.root
            path = path.replace(":/", ":\\")
            pattern = re.compile(r'([a-z]):\\', re.IGNORECASE)
            path = pattern.sub('/\\1/', path).replace('\\', '/')

            if self.settings.arch == 'x86_64':
                config = 'win64'
            else:
                config = 'win32'
            self.run(
                "cd %s && ./cerbero-uninstalled -c config/%s.cbc bootstrap"
                % (path, config),
                win_bash=True)

    def package(self):
        self.copy(
            pattern="*",
            dst="build",
            src="%s/cerbero/build" % self.root,
            symlinks=True)
